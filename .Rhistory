save(Y_list, X_list, B_list_all, file = filename)
message("Saved to: ", filename)
}
for (i in 1:nrow(param_grid)) {
r_vec <- c(param_grid$r1[i], param_grid$r2[i])
p     <- param_grid$p[i]
eps   <- param_grid$eps[i]
n     <- param_grid$n[i]
Omega <- param_grid$Omega[i]
f_num <- param_grid$f_num[i]
# Lists to collect replications
Y_list <- vector("list", n_rep)
X_list <- vector("list", n_rep)
B_list_all <- vector("list", n_rep)
for (rep in 1:n_rep) {
B_list    <- DGen_B(r_vec, p)
B         <- B_list$B
beta_list <- B_list$beta_list
X         <- DGen_X(n, p)
Sigma     <- DGen_Sigma(beta_list, exp(Omega))
Y         <- DGen_Y(B, X, eps, Sigma, function_num = f_num)
# Store results
Y_list[[rep]]     <- Y
X_list[[rep]]     <- X
B_list_all[[rep]] <- B_list
}
# Save everything in one file
r_str <- paste(r_vec, collapse = "x")
filename <- sprintf("data/SimData_n%d_p%d_r%s_eps%.2f_fn%d_rep%d.RData", n, p, r_str, eps, f_num, n_rep)
save(Y_list, X_list, B_list_all, file = filename)
message("Saved to: ", filename)
}
# parameter grids
r_vec_list <- list(c(10,10))
p_list     <- c(3)
eps_list   <- c(0.1)
n_list     <- c(10, 50, 100)
Omega_list <- c(3)
f_num_list <- c(1, 2)
n_rep      <- 2
#combinations
param_grid <- expand.grid(
r1 = sapply(r_vec_list, `[`, 1),
r2 = sapply(r_vec_list, `[`, 2),
p = p_list,
eps = eps_list,
n = n_list,
Omega = Omega_list,
f_num = f_num_list
)
for (i in 1:nrow(param_grid)) {
r_vec <- c(param_grid$r1[i], param_grid$r2[i])
p     <- param_grid$p[i]
eps   <- param_grid$eps[i]
n     <- param_grid$n[i]
Omega <- param_grid$Omega[i]
f_num <- param_grid$f_num[i]
# Lists to collect replications
Y_list <- vector("list", n_rep)
X_list <- vector("list", n_rep)
B_list_all <- vector("list", n_rep)
for (rep in 1:n_rep) {
B_list    <- DGen_B(r_vec, p)
B         <- B_list$B
beta_list <- B_list$beta_list
X         <- DGen_X(n, p)
Sigma     <- DGen_Sigma(beta_list, exp(Omega))
Y         <- DGen_Y(B, X, eps, Sigma, function_num = f_num)
# Store results
Y_list[[rep]]     <- Y
X_list[[rep]]     <- X
B_list_all[[rep]] <- B_list
}
# Save everything in one file
r_str <- paste(r_vec, collapse = "x")
filename <- sprintf("data/SimData_n%d_p%d_r%s_eps%.2f_fn%d_rep%d.RData", n, p, r_str, eps, f_num, n_rep)
save(Y_list, X_list, B_list_all, file = filename)
message("Saved to: ", filename)
}
library(foreach)
library(doParallel)
n_cores <- parallel::detectCores() - 1
cl <- makeCluster(n_cores)
registerDoParallel(cl)
foreach(i = 1:nrow(param_grid), .packages = c("rTensor", "MASS")) %dopar% {
r_vec <- c(param_grid$r1[i], param_grid$r2[i])
p     <- param_grid$p[i]
eps   <- param_grid$eps[i]
n     <- param_grid$n[i]
Omega <- param_grid$Omega[i]
f_num <- param_grid$f_num[i]
r_str <- paste(r_vec, collapse = "x")
input_file <- sprintf("data/SimData_n%d_p%d_r%s_eps%.2f_fn%d_rep%d.RData",
n, p, r_str, eps, f_num, n_rep)
if (!file.exists(input_file)) {
message("Missing: ", input_file)
return(NULL)
}
load(input_file)
cmte_est_list <- vector("list", n_rep)
trr_est_list  <- vector("list", n_rep)
tmddm_est_list <- vector("list", n_rep)
cmte_acc_list <- numeric(n_rep)
trr_acc_list  <- numeric(n_rep)
tmddm_acc_list <- numeric(n_rep)
time_cmte_list  <- numeric(n_rep)
time_trr_list   <- numeric(n_rep)
time_tmddm_list <- numeric(n_rep)
for (rep in 1:n_rep) {
Y <- Y_list[[rep]]
X <- X_list[[rep]]
beta_list <- B_list_all[[rep]]$beta_list
time_cmte_list[rep] <- system.time({
M_xy <- TMDDM(X@data, Y)
cmte_est <- CMTE(X@data, Y, M_xy)
})[3]
cmte_est_list[[rep]] <- cmte_est
cmte_acc_list[rep] <- beta_acc(cmte_est, beta_list)
time_trr_list[rep] <- system.time({
TReg <- TRR.fit(X@data, Y, u = c(1, 1), method = "1D")
trr_est <- TReg$Gamma
})[3]
trr_est_list[[rep]] <- trr_est
trr_acc_list[rep] <- beta_acc(trr_est, beta_list)
time_tmddm_list[rep] <- system.time({
M_xy <- TMDDM(X@data, Y)
tmddm_est <- lapply(M_xy, function(Mk) {
eigen(Mk)$vectors[, 1]
})
})[3]
tmddm_est_list[[rep]] <- tmddm_est
tmddm_acc_list[rep] <- beta_acc(tmddm_est, beta_list)
}
output_file <- sprintf("results/coef_est_n%d_p%d_r%s_eps%.2f_fn%d_rep%d.RData",
n, p, r_str, eps, f_num, n_rep)
save(cmte_est_list, trr_est_list, tmddm_est_list,
cmte_acc_list, trr_acc_list, tmddm_acc_list,
time_cmte_list, time_trr_list, time_tmddm_list,
file = output_file)
}
source("./parameters.R")
source("./DataGen.R")
source("./cmte.R")
source("./Evaluation.R")
foreach(i = 1:nrow(param_grid), .packages = c("rTensor", "MASS")) %dopar% {
r_vec <- c(param_grid$r1[i], param_grid$r2[i])
p     <- param_grid$p[i]
eps   <- param_grid$eps[i]
n     <- param_grid$n[i]
Omega <- param_grid$Omega[i]
f_num <- param_grid$f_num[i]
r_str <- paste(r_vec, collapse = "x")
input_file <- sprintf("data/SimData_n%d_p%d_r%s_eps%.2f_fn%d_rep%d.RData",
n, p, r_str, eps, f_num, n_rep)
if (!file.exists(input_file)) {
message("Missing: ", input_file)
return(NULL)
}
load(input_file)
cmte_est_list <- vector("list", n_rep)
trr_est_list  <- vector("list", n_rep)
tmddm_est_list <- vector("list", n_rep)
cmte_acc_list <- numeric(n_rep)
trr_acc_list  <- numeric(n_rep)
tmddm_acc_list <- numeric(n_rep)
time_cmte_list  <- numeric(n_rep)
time_trr_list   <- numeric(n_rep)
time_tmddm_list <- numeric(n_rep)
for (rep in 1:n_rep) {
Y <- Y_list[[rep]]
X <- X_list[[rep]]
beta_list <- B_list_all[[rep]]$beta_list
time_cmte_list[rep] <- system.time({
M_xy <- TMDDM(X@data, Y)
cmte_est <- CMTE(X@data, Y, M_xy)
})[3]
cmte_est_list[[rep]] <- cmte_est
cmte_acc_list[rep] <- beta_acc(cmte_est, beta_list)
time_trr_list[rep] <- system.time({
TReg <- TRR.fit(X@data, Y, u = c(1, 1), method = "1D")
trr_est <- TReg$Gamma
})[3]
trr_est_list[[rep]] <- trr_est
trr_acc_list[rep] <- beta_acc(trr_est, beta_list)
time_tmddm_list[rep] <- system.time({
M_xy <- TMDDM(X@data, Y)
tmddm_est <- lapply(M_xy, function(Mk) {
eigen(Mk)$vectors[, 1]
})
})[3]
tmddm_est_list[[rep]] <- tmddm_est
tmddm_acc_list[rep] <- beta_acc(tmddm_est, beta_list)
}
output_file <- sprintf("results/coef_est_n%d_p%d_r%s_eps%.2f_fn%d_rep%d.RData",
n, p, r_str, eps, f_num, n_rep)
save(cmte_est_list, trr_est_list, tmddm_est_list,
cmte_acc_list, trr_acc_list, tmddm_acc_list,
time_cmte_list, time_trr_list, time_tmddm_list,
file = output_file)
}
library("TRES")
foreach(i = 1:nrow(param_grid), .packages = c("rTensor", "MASS")) %dopar% {
r_vec <- c(param_grid$r1[i], param_grid$r2[i])
p     <- param_grid$p[i]
eps   <- param_grid$eps[i]
n     <- param_grid$n[i]
Omega <- param_grid$Omega[i]
f_num <- param_grid$f_num[i]
r_str <- paste(r_vec, collapse = "x")
input_file <- sprintf("data/SimData_n%d_p%d_r%s_eps%.2f_fn%d_rep%d.RData",
n, p, r_str, eps, f_num, n_rep)
if (!file.exists(input_file)) {
message("Missing: ", input_file)
return(NULL)
}
load(input_file)
cmte_est_list <- vector("list", n_rep)
trr_est_list  <- vector("list", n_rep)
tmddm_est_list <- vector("list", n_rep)
cmte_acc_list <- numeric(n_rep)
trr_acc_list  <- numeric(n_rep)
tmddm_acc_list <- numeric(n_rep)
time_cmte_list  <- numeric(n_rep)
time_trr_list   <- numeric(n_rep)
time_tmddm_list <- numeric(n_rep)
for (rep in 1:n_rep) {
Y <- Y_list[[rep]]
X <- X_list[[rep]]
beta_list <- B_list_all[[rep]]$beta_list
time_cmte_list[rep] <- system.time({
M_xy <- TMDDM(X@data, Y)
cmte_est <- CMTE(X@data, Y, M_xy)
})[3]
cmte_est_list[[rep]] <- cmte_est
cmte_acc_list[rep] <- beta_acc(cmte_est, beta_list)
time_trr_list[rep] <- system.time({
TReg <- TRR.fit(X@data, Y, u = c(1, 1), method = "1D")
trr_est <- TReg$Gamma
})[3]
trr_est_list[[rep]] <- trr_est
trr_acc_list[rep] <- beta_acc(trr_est, beta_list)
time_tmddm_list[rep] <- system.time({
M_xy <- TMDDM(X@data, Y)
tmddm_est <- lapply(M_xy, function(Mk) {
eigen(Mk)$vectors[, 1]
})
})[3]
tmddm_est_list[[rep]] <- tmddm_est
tmddm_acc_list[rep] <- beta_acc(tmddm_est, beta_list)
}
output_file <- sprintf("results/coef_est_n%d_p%d_r%s_eps%.2f_fn%d_rep%d.RData",
n, p, r_str, eps, f_num, n_rep)
save(cmte_est_list, trr_est_list, tmddm_est_list,
cmte_acc_list, trr_acc_list, tmddm_acc_list,
time_cmte_list, time_trr_list, time_tmddm_list,
file = output_file)
}
foreach(i = 1:nrow(param_grid), .packages = c("rTensor", "MASS","TRES")) %dopar% {
r_vec <- c(param_grid$r1[i], param_grid$r2[i])
p     <- param_grid$p[i]
eps   <- param_grid$eps[i]
n     <- param_grid$n[i]
Omega <- param_grid$Omega[i]
f_num <- param_grid$f_num[i]
r_str <- paste(r_vec, collapse = "x")
input_file <- sprintf("data/SimData_n%d_p%d_r%s_eps%.2f_fn%d_rep%d.RData",
n, p, r_str, eps, f_num, n_rep)
if (!file.exists(input_file)) {
message("Missing: ", input_file)
return(NULL)
}
load(input_file)
cmte_est_list <- vector("list", n_rep)
trr_est_list  <- vector("list", n_rep)
tmddm_est_list <- vector("list", n_rep)
cmte_acc_list <- numeric(n_rep)
trr_acc_list  <- numeric(n_rep)
tmddm_acc_list <- numeric(n_rep)
time_cmte_list  <- numeric(n_rep)
time_trr_list   <- numeric(n_rep)
time_tmddm_list <- numeric(n_rep)
for (rep in 1:n_rep) {
Y <- Y_list[[rep]]
X <- X_list[[rep]]
beta_list <- B_list_all[[rep]]$beta_list
time_cmte_list[rep] <- system.time({
M_xy <- TMDDM(X@data, Y)
cmte_est <- CMTE(X@data, Y, M_xy)
})[3]
cmte_est_list[[rep]] <- cmte_est
cmte_acc_list[rep] <- beta_acc(cmte_est, beta_list)
time_trr_list[rep] <- system.time({
TReg <- TRR.fit(X@data, Y, u = c(1, 1), method = "1D")
trr_est <- TReg$Gamma
})[3]
trr_est_list[[rep]] <- trr_est
trr_acc_list[rep] <- beta_acc(trr_est, beta_list)
time_tmddm_list[rep] <- system.time({
M_xy <- TMDDM(X@data, Y)
tmddm_est <- lapply(M_xy, function(Mk) {
eigen(Mk)$vectors[, 1]
})
})[3]
tmddm_est_list[[rep]] <- tmddm_est
tmddm_acc_list[rep] <- beta_acc(tmddm_est, beta_list)
}
output_file <- sprintf("results/coef_est_n%d_p%d_r%s_eps%.2f_fn%d_rep%d.RData",
n, p, r_str, eps, f_num, n_rep)
save(cmte_est_list, trr_est_list, tmddm_est_list,
cmte_acc_list, trr_acc_list, tmddm_acc_list,
time_cmte_list, time_trr_list, time_tmddm_list,
file = output_file)
}
foreach(i = 1:nrow(param_grid), .packages = c("rTensor", "MASS","TRES")) %dopar% {
r_vec <- c(param_grid$r1[i], param_grid$r2[i])
p     <- param_grid$p[i]
eps   <- param_grid$eps[i]
n     <- param_grid$n[i]
Omega <- param_grid$Omega[i]
f_num <- param_grid$f_num[i]
r_str <- paste(r_vec, collapse = "x")
input_file <- sprintf("data/SimData_n%d_p%d_r%s_eps%.2f_fn%d_rep%d.RData",
n, p, r_str, eps, f_num, n_rep)
if (!file.exists(input_file)) {
message("Missing: ", input_file)
return(NULL)
}
load(input_file)
cmte_est_list <- vector("list", n_rep)
trr_est_list  <- vector("list", n_rep)
tmddm_est_list <- vector("list", n_rep)
cmte_acc_list <- numeric(n_rep)
trr_acc_list  <- numeric(n_rep)
tmddm_acc_list <- numeric(n_rep)
time_cmte_list  <- numeric(n_rep)
time_trr_list   <- numeric(n_rep)
time_tmddm_list <- numeric(n_rep)
for (rep in 1:n_rep) {
Y <- Y_list[[rep]]
X <- X_list[[rep]]
beta_list <- B_list_all[[rep]]$beta_list
time_cmte_list[rep] <- system.time({
M_xy <- TMDDM(X@data, Y)
cmte_est <- CMTE(X@data, Y, M_xy)
})[3]
cmte_est_list[[rep]] <- cmte_est
cmte_acc_list[rep] <- beta_acc(cmte_est, beta_list)
time_trr_list[rep] <- system.time({
TReg <- TRR.fit(X@data, Y, u = c(1, 1), method = "1D")
trr_est <- TReg$Gamma
})[3]
trr_est_list[[rep]] <- trr_est
trr_acc_list[rep] <- beta_acc(trr_est, beta_list)
time_tmddm_list[rep] <- system.time({
M_xy <- TMDDM(X@data, Y)
tmddm_est <- lapply(M_xy, function(Mk) {
eigen(Mk)$vectors[, 1]
})
})[3]
tmddm_est_list[[rep]] <- tmddm_est
tmddm_acc_list[rep] <- beta_acc(tmddm_est, beta_list)
}
output_file <- sprintf("results/coef_est_n%d_p%d_r%s_eps%.2f_fn%d_rep%d.RData",
n, p, r_str, eps, f_num, n_rep)
save(cmte_est_list, trr_est_list, tmddm_est_list,
cmte_acc_list, trr_acc_list, tmddm_acc_list,
time_cmte_list, time_trr_list, time_tmddm_list,
file = output_file)
}
results_log <- foreach(i = 1:nrow(param_grid), .packages = c("rTensor", "MASS"), .combine = rbind) %dopar% {
r_vec <- c(param_grid$r1[i], param_grid$r2[i])
p     <- param_grid$p[i]
eps   <- param_grid$eps[i]
n     <- param_grid$n[i]
Omega <- param_grid$Omega[i]
f_num <- param_grid$f_num[i]
r_str <- paste(r_vec, collapse = "x")
input_file <- sprintf("data/SimData_n%d_p%d_r%s_eps%.2f_fn%d_rep%d.RData",
n, p, r_str, eps, f_num, n_rep)
if (!file.exists(input_file)) {
return(data.frame(n = n, f_num = f_num, message = "File missing"))
}
load(input_file)
cmte_acc_list <- numeric(n_rep)
trr_acc_list  <- numeric(n_rep)
tmddm_acc_list <- numeric(n_rep)
for (rep in 1:n_rep) {
Y <- Y_list[[rep]]
X <- X_list[[rep]]
beta_list <- B_list_all[[rep]]$beta_list
M_xy <- TMDDM(X@data, Y)
cmte_est <- CMTE(X@data, Y, M_xy)
cmte_acc_list[rep] <- beta_acc(cmte_est, beta_list)
TReg <- TRR.fit(X@data, Y, u = c(1, 1), method = "1D")
trr_est <- TReg$Gamma
trr_acc_list[rep] <- beta_acc(trr_est, beta_list)
M_xy <- TMDDM(X@data, Y)
tmddm_est <- lapply(M_xy, function(Mk) eigen(Mk)$vectors[, 1])
tmddm_acc_list[rep] <- beta_acc(tmddm_est, beta_list)
}
# Save result
output_file <- sprintf("results/coef_est_n%d_p%d_r%s_eps%.2f_fn%d_rep%d.RData",
n, p, r_str, eps, f_num, n_rep)
save(cmte_acc_list, trr_acc_list, tmddm_acc_list, file = output_file)
# Return message line
msg <- sprintf("n=%d, fn=%d | CMTE=%.4f, TRR=%.4f, TMDDM=%.4f",
n, f_num, mean(cmte_acc_list), mean(trr_acc_list), mean(tmddm_acc_list))
data.frame(n = n, f_num = f_num, message = msg)
}
print(results_log$message)
results_log <- foreach(i = 1:nrow(param_grid), .packages = c("rTensor", "MASS"), .combine = rbind) %dopar% {
r_vec <- c(param_grid$r1[i], param_grid$r2[i])
p     <- param_grid$p[i]
eps   <- param_grid$eps[i]
n     <- param_grid$n[i]
Omega <- param_grid$Omega[i]
f_num <- param_grid$f_num[i]
r_str <- paste(r_vec, collapse = "x")
input_file <- sprintf("data/SimData_n%d_p%d_r%s_eps%.2f_fn%d_rep%d.RData",
n, p, r_str, eps, f_num, n_rep)
if (!file.exists(input_file)) {
return(data.frame(n = n, f_num = f_num, message = "File missing"))
}
load(input_file)
cmte_acc_list <- numeric(n_rep)
trr_acc_list  <- numeric(n_rep)
tmddm_acc_list <- numeric(n_rep)
for (rep in 1:n_rep) {
Y <- Y_list[[rep]]
X <- X_list[[rep]]
beta_list <- B_list_all[[rep]]$beta_list
M_xy <- TMDDM(X@data, Y)
cmte_est <- CMTE(X@data, Y, M_xy)
cmte_acc_list[rep] <- beta_acc(cmte_est, beta_list)
TReg <- TRR.fit(X@data, Y, u = c(1, 1), method = "1D")
trr_est <- TReg$Gamma
trr_acc_list[rep] <- beta_acc(trr_est, beta_list)
M_xy <- TMDDM(X@data, Y)
tmddm_est <- lapply(M_xy, function(Mk) eigen(Mk)$vectors[, 1])
tmddm_acc_list[rep] <- beta_acc(tmddm_est, beta_list)
}
# Save result
output_file <- sprintf("results/coef_est_n%d_p%d_r%s_eps%.2f_fn%d_rep%d.RData",
n, p, r_str, eps, f_num, n_rep)
save(cmte_acc_list, trr_acc_list, tmddm_acc_list, file = output_file)
# Return message line
msg <- sprintf("n=%d, fn=%d | CMTE=%.4f, TRR=%.4f, TMDDM=%.4f",
n, f_num, cmte_acc_list, trr_acc_list, tmddm_acc_list)
data.frame(n = n, f_num = f_num, message = msg)
}
print(results_log$message)
results_log <- foreach(i = 1:nrow(param_grid), .packages = c("rTensor", "MASS"), .combine = rbind) %dopar% {
r_vec <- c(param_grid$r1[i], param_grid$r2[i])
p     <- param_grid$p[i]
eps   <- param_grid$eps[i]
n     <- param_grid$n[i]
Omega <- param_grid$Omega[i]
f_num <- param_grid$f_num[i]
r_str <- paste(r_vec, collapse = "x")
input_file <- sprintf("data/SimData_n%d_p%d_r%s_eps%.2f_fn%d_rep%d.RData",
n, p, r_str, eps, f_num, n_rep)
if (!file.exists(input_file)) {
return(data.frame(n = n, f_num = f_num, message = "File missing"))
}
load(input_file)
cmte_acc_list <- numeric(n_rep)
trr_acc_list  <- numeric(n_rep)
tmddm_acc_list <- numeric(n_rep)
for (rep in 1:n_rep) {
Y <- Y_list[[rep]]
X <- X_list[[rep]]
beta_list <- B_list_all[[rep]]$beta_list
M_xy <- TMDDM(X@data, Y)
cmte_est <- CMTE(X@data, Y, M_xy)
cmte_acc_list[rep] <- beta_acc(cmte_est, beta_list)
TReg <- TRR.fit(X@data, Y, u = c(1, 1), method = "1D")
trr_est <- TReg$Gamma
trr_acc_list[rep] <- beta_acc(trr_est, beta_list)
M_xy <- TMDDM(X@data, Y)
tmddm_est <- lapply(M_xy, function(Mk) eigen(Mk)$vectors[, 1])
tmddm_acc_list[rep] <- beta_acc(tmddm_est, beta_list)
}
# Save result
output_file <- sprintf("results/coef_est_n%d_p%d_r%s_eps%.2f_fn%d_rep%d.RData",
n, p, r_str, eps, f_num, n_rep)
save(cmte_acc_list, trr_acc_list, tmddm_acc_list, file = output_file)
# Return message line
msg <- sprintf("n=%d, fn=%d | CMTE=%.4f, TRR=%.4f, TMDDM=%.4f",
n, f_num, mean(cmte_acc_list), mean(trr_acc_list), mean(tmddm_acc_list))
data.frame(n = n, f_num = f_num, message = msg)
}
print(results_log$message)
#generate table
source("./table_output.R")
#generate table
source("./table_output.R")
#generate table
source("./table_output.R")
#generate table
source("./table_output.R")
#generate table
source("./table_output.R")
#generate table
source("./table_output.R")
#generate table
source("./table_output.R")
#generate table
source("./table_output.R")
TReg$Gamma
TReg <- TRR.fit(X@data, Y, u = c(1, 1), method = "1D")
trr_est <- TReg$Gamma
trr_est
